public static class LoggerExtensions
{
    public static void LogDebugIfEnabled(this ILogger logger, Func<(Exception? Exception, string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Debug))
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args);
        }
    }

    public static void LogDebugIfEnabled(this ILogger logger, Func<(string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Debug))
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }

    public static void LogTraceIfEnabled(this ILogger logger, Func<(Exception? Exception, string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Trace)
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args);
        }
    }

    public static void LogTraceIfEnabled(this ILogger logger, Func<(string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Trace)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }

    public static void LogInformationIfEnabled(this ILogger logger, Func<(Exception? Exception, string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Information)
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args);
        }
    }

    public static void LogInformationIfEnabled(this ILogger logger, Func<(string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(LogLevel.Information)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }  
    }

    public static void LogWarningIfEnabled(this ILogger logger, Exception? exception, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Warning)
        {   
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args);
        }
    }

    public static void LogWarningIfEnabled(this ILogger logger, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Warning)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }

    public static void LogErrorIfEnabled(this ILogger logger, Exception? exception, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Error)
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args);
        }
    }

    public static void LogErrorIfEnabled(this ILogger logger, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Error)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }

    public static void LogCriticalIfEnabled(this ILogger logger, Exception? exception, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Critical)
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args)
        }
    }

    public static void LogCriticalIfEnabled(this ILogger logger, string? message, params object?[] args)
    {
        if(logger.IsEnabled(LogLevel.Critical)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }

    public static void LogIfEnabled(this ILogger logger, LogLevel logLevel, Func<(Exception? Exception, string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(logLevel)
        {
            var @params = func(); 
            logger.Log(@params.Exception, @params.Message, @params.Args)
        }
    }

    public static void LogIfEnabled(this ILogger logger, LogLevel logLevel, Func<(string Message, object?[] Args)> func)
    {
        if(logger.IsEnabled(logLevel)
        {
            var @params = func();
            logger.Log(@params.Message, @params.Args);
        }
    }
}